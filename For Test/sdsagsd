repeat wait() until game:IsLoaded()
getgenv().DiscordInvite = "https://bit.ly/3gA2nY8"
getgenv().HowToGetKeyLink = "https://bit.ly/3oHhFPC"
getgenv().PermanentPassLink = "https://thedragonslayer2.github.io/"
getgenv().getupvalue = getupvalue or debug and debug.getupvalue
getgenv().getupvalues = getupvalues or debug and debug.getupvalues
getgenv().getupvalue = getupvalue or debug and debug.getconstant
getgenv().getupvalues = getupvalues or debug and debug.getconstants
getgenv().wait = task.wait
getgenv().spawn = task.spawn
getgenv().players = game:GetService"Players"
getgenv().client = game:GetService"Players".LocalPlayer
getgenv().QoT = syn and syn.queue_on_teleport or queue_on_teleport or queueonteleport
getgenv().LooP = function(func, Delay, Pcall)
	task.spawn(function()
		while true do
			if Pcall then pcall(function() func() end)
			else func() end
			task.wait(Delay)
		end
	end)
end
getgenv().ForLooP = function(Table, func) for i, v in next, Table do func(i, v) end end
getgenv().FastForLooP = function(Table, func)
	for i, v in next, Table do task.spawn(function() func(i, v) end) end
end
getgenv().ModsDetector = function(GroupID, Rank)
	local function PlayerRankCheck(Player)
		pcall(function()
			repeat task.wait() until Player.GetRankInGroup
			if Player:GetRankInGroup(tonumber(GroupID)) >= tonumber(Rank) then client:Kick"\nAdmin Detected!" end
		end)
	end

	game:GetService"Players".PlayerAdded:Connect(PlayerRankCheck)
	for _, player in next, game:GetService"Players":GetChildren() do task.spawn(function() PlayerRankCheck(player) end) end
end
getgenv().MrJackTable = {
	UwULibrary = function()
		MrJackTable.UwULibraryLoaded = nil
		loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/UI-Libraries/main/UwuWare.lua")()
		return MrJackTable.UwULibraryLoaded
	end,
	VenyxLibrary = function()
		MrJackTable.VenyxLibraryLoaded = nil
		loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/UI-Libraries/main/Venyx(Redirect).lua")()
		return MrJackTable.VenyxLibraryLoaded
	end
}
if getconnections or firesignal then
	getgenv().buttonclick = function(button)
		local events = { "MouseButton1Click", "MouseButton1Down", "Activated" }
		for i, v in next, events do
			task.spawn(function()
				if getconnections then
					pcall(function()
						for i, v in pairs(getconnections(button[v])) do pcall(function() v:Fire() end) end
					end)
				end
				if firesignal then pcall(function() firesignal(button[v]) end) end
			end)
		end
	end
end
getgenv().ArrangeListWithNum = function(Table, Reverse)
	local NewTable = {}
	table.sort(Table, function(a, b)
		a, b = tonumber(string.match(a, "%d+")), tonumber(string.match(b, "%d+"))
		if Reverse then return a > b
		else return a < b end
	end)
	for i, v in next, Table do NewTable[i] = v:split"--"[2] end
	return NewTable
end
getgenv().RandomName = function(Size)
	local String, Table = "", {}
	for Nums = 48, 57 do table.insert(Table, string.char(Nums)) end
	for Upper = 65, 90 do table.insert(Table, string.char(Upper)) end
	for Lower = 97, 122 do table.insert(Table, string.char(Lower)) end
	for i = 1, Size do String = String .. Table[math.random(#Table)] end
	return String
end
getgenv().AbstractPooNotif = function()
	if not getgenv().AbstractPooNotifLoad then
		getgenv().AbstractPooNotifLoad = loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/Misc/main/AbstractPoo%20Notif")()
	end
	return getgenv().AbstractPooNotifLoad
end
--[[
	getgenv().Obfuscate = function(String, Site)
	if Site then String = game:HttpGet(String) end
	local encode = String:gsub(".", function(bb) return "\\" .. bb:byte() end) or String
	setclipboard('loadstring("' .. encode .. '")()')
	warn"Obfuscated Using Trash Obfuscator!"
	end
	getgenv().SaveTable = function(Table)
	writefile("SavedTable.json", game:GetService"HttpService":JSONEncode(Table))
	end
	getgenv().orderedpairs = function(t, reverse)
	local function cmp_multitype(op1, op2)
	local type1, type2 = type(op1), type(op2)
	if reverse then
	if type1 ~= type2 then return type1 > type2
	elseif type1 == "number" or type1 == "string" then return op1 > op2
	elseif type1 == "boolean" then return op1 == true
	else return tostring(op1) > tostring(op2) end
	else
	if type1 ~= type2 then return type1 < type2
	elseif type1 == "number" or type1 == "string" then return op1 < op2
	elseif type1 == "boolean" then return op1 == true
	else return tostring(op1) < tostring(op2) end
	end
	end
	local function __genOrderedIndex(t)
	local orderedIndex = {}
	for key in pairs(t) do table.insert(orderedIndex, key) end
	table.sort(orderedIndex, cmp_multitype)
	return orderedIndex
	end
	local function orderedNext(t, state)
	local key = nil
	if state == nil then
	t.__orderedIndex = __genOrderedIndex(t)
	key = t.__orderedIndex[1]
	else
	for i = 1, table.getn(t.__orderedIndex) do
	if t.__orderedIndex[i] == state then key = t.__orderedIndex[i + 1] end
	end
	end
	if key then return key, t[key] end
	t.__orderedIndex = nil
	return
	end
	return orderedNext, t, nil
	end
	if not fireproximityprompt then
	getgenv().fireproximityprompt = function(Obj, Amount)
	if Obj.ClassName == "ProximityPrompt" then
	local PromptTime = Obj.HoldDuration
	Obj.Enabled, Obj.RequiresLineOfSight,Obj.HoldDuration = true, false,0
	for i = 1, Amount or 1 do
	Obj:InputHoldBegin()
	Obj:InputHoldEnd()
	end
	Obj.HoldDuration = PromptTime
	else error"userdata<ProximityPrompt> expected" end
	end
	end
	coroutine.wrap(function()
	local Classes, SavedClasses = game:GetService"HttpService":JSONDecode(game:HttpGet("http://setup.roblox.com/" .. game:HttpGet"http://setup.roblox.com/versionQTStudio" .. "-API-Dump.json")).Classes, {}
	for i, Class in next, Classes do
	SavedClasses[Class.Name] = {}
	for i, v in next, Class.Members do table.insert(SavedClasses[Class.Name], v.Name) end
	end
	getgenv().GetClassProperties = function(Class)
	if type(Class) == "userdata" then Class = Class.ClassName end
	return SavedClasses[Class]
	end
	end)()
]]
